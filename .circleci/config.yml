version: 2.1

parameters:
  package:
    type: string
    default: dwave-samplers

orbs:
  ocean: dwave/ocean@1

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-install:
    docker:
      - image: circleci/python:3.7    # last version pip==8.1.0 works on

    steps:
      - checkout

      - attach_workspace: &attach-dist
          at: dist

      - run:
          # pip 19.0 is the first to support pyproject.toml build config *with*
          # environment markers (note: we split numpy on py310), and
          # *manylinux2010* wheels (required by the numpy version we use)
          name: Install from sdist with pip==19.0
          command: |
            python -m venv env-sdist-pip19
            . env-sdist-pip19/bin/activate
            pip install 'pip==19.0'
            pip install ./dist/dwave-samplers*.tar.gz

      - run:
          name: Install from sdist with latest pip
          command: |
            python -m venv env-sdist
            . env-sdist/bin/activate
            pip install -U pip
            pip install ./dist/dwave-samplers*.tar.gz

      - run:
          name: Install from wheel with latest pip
          command: |
            python -m venv env-wheel
            . env-wheel/bin/activate
            pip install -U pip
            pip install -r requirements.txt
            pip install --no-index --find-links=dist --only-binary=dwave-samplers dwave-samplers

  test-cpp:
    docker:
      # just use a python image, all we really want is debian
      - image: cimg/python:3.10.4

    steps:
      - checkout
      - run:
          name: Run C++ tests
          command: |
            make -C tests/cpp/ --always-make

workflows:
  build-test-deploy:
    jobs:
      - ocean/build-sdist:
          filters: &always-run  # required because it's indirectly required by the deploy job that runs on tags only
            tags:
              only: /.*/

      - ocean/build-manylinux-wheel:
          name: build-<< matrix.manylinux-tag >>_<< matrix.manylinux-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              manylinux-tag: ["manylinux2014"]
              manylinux-arch: ["x86_64"]
              python-version: &python-versions ["3.7.9", "3.8.9", "3.9.4", "3.10.0"]
          filters:
            <<: *always-run

      - ocean/cibw-build-linux-aarch64-wheel:
          name: build-<< matrix.manylinux-tag >>_aarch64-py<< matrix.python-version >>
          matrix:
            parameters:
              manylinux-tag: ["manylinux2014"]
              python-version: *python-versions
          filters:
            <<: *always-run

      - ocean/test-linux-from-dist:
          name: test-linux-py<< matrix.python-version >>|<< matrix.constraints >>
          requires:
            - ocean/build-sdist
            - ocean/build-manylinux-wheel
          matrix:
            parameters:
              python-version: *python-versions
              package: [<< pipeline.parameters.package >>]
              constraints: ["dimod==0.11.0", "dimod~=0.11.0"]
          filters:
            <<: *always-run

      # - test-install:
      #     requires:
      #       - ocean/build-sdist
      #       - ocean/build-manylinux-wheel
      #     filters:
      #       <<: *always-run

      - ocean/test-docs:
          name: test-docs
          requires:
            - ocean/build-sdist
            - ocean/build-manylinux-wheel
          matrix:
            parameters:
              package: [<< pipeline.parameters.package >>]
          filters:
            <<: *always-run

      - ocean/cibw-build-macos-wheel:
          name: build-macos-py<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              cibw-archs: ["x86_64 universal2"]
          filters:
            <<: *always-run

      - ocean/test-macos-from-dist:
          name: test-macos-py<< matrix.python-version >>
          requires:
            - ocean/build-sdist
            - ocean/cibw-build-macos-wheel
          matrix:
            parameters:
              python-version: *python-versions
              xcode: ["13.2.0"]
              package: [<< pipeline.parameters.package >>]
          filters:
            <<: *always-run

      - ocean/build-windows-wheel:
          name: build-win-<< matrix.python-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              python-arch: &python-archs-win [""]
          filters:
            <<: *always-run

      - ocean/test-windows-from-dist:
          name: test-win-<< matrix.python-arch >>-py<< matrix.python-version >>
          requires:
            - ocean/build-windows-wheel
          matrix:
            parameters:
              python-version: *python-versions
              python-arch: *python-archs-win
              package: [<< pipeline.parameters.package >>]
          filters:
            <<: *always-run

      - test-cpp:
          filters:
            <<: *always-run

      - ocean/pypi-deploy:
          requires:
            - ocean/test-linux-from-dist
            - ocean/test-macos-from-dist
            - ocean/test-windows-from-dist
            - ocean/test-docs
            # - test-install
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
